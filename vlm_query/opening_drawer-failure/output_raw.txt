```python
# The task "Open the drawer" involves two stages:
# 1. Grasp the drawer handle (keypoint 21).
# 2. Pull the drawer open.

num_stages = 2

### stage 1 sub-goal constraints (grasp the drawer handle)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the drawer handle (keypoint 21)."""
    handle_position = keypoints[21]
    cost = np.linalg.norm(end_effector - handle_position)
    return cost

# No path constraints for stage 1
# ...

### stage 2 sub-goal constraints (pull the drawer open)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The drawer handle (keypoint 21) must be displaced by 10cm along the x-axis (positive direction)."""
    handle_position = keypoints[21]
    target_position = handle_position + np.array([0.1, 0, 0])  # 10cm along the x-axis
    cost = np.linalg.norm(handle_position - target_position)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the drawer handle (keypoint 21)."""
    handle_position = keypoints[21]
    cost = np.linalg.norm(end_effector - handle_position)
    return cost

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [21, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, 21]
```