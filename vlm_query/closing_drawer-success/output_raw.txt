```python
# The task "Close the drawer" involves two stages:
# 1. Grasp the drawer handle.
# 2. Push the drawer to close it.

num_stages = 2

### stage 1 sub-goal constraints (grasp the drawer handle)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """
    Align the end-effector with the drawer handle (keypoint 43).
    The cost is the Euclidean distance between the end-effector and keypoint 43.
    """
    handle_position = keypoints[43]
    cost = np.linalg.norm(end_effector - handle_position)
    return cost

### stage 1 path constraints
# No path constraints are needed for the grasping stage.

### stage 2 sub-goal constraints (push the drawer to close it)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """
    Ensure the drawer is fully closed.
    The cost is the Euclidean distance between the drawer's current position (keypoint 43)
    and its fully closed position, which is offset from keypoint 43 along the x-axis.
    """
    closed_position = keypoints[43] + np.array([-0.2, 0, 0])  # Assuming 20cm to the left closes the drawer.
    drawer_position = keypoints[43]
    cost = np.linalg.norm(drawer_position - closed_position)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """
    The robot must still be grasping the drawer handle (keypoint 43) while pushing the drawer.
    The cost is the Euclidean distance between the end-effector and keypoint 43.
    """
    handle_position = keypoints[43]
    cost = np.linalg.norm(end_effector - handle_position)
    return cost

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [43, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, 43]
```